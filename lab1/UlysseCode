import threading

#merge function to combine 2 sorted list
def merge(left,right):
    sorted = []
    i=j=0
    while i < len(left) and j < len(right):
        if left[i]<=right[j]:
            sorted.append(left[i])
            i+=1
        else:
            sorted.append(right[i])
            j+=1
    #include the surplus of lists
    sorted.extend(left[i:])
    sorted.extend(right[j:])
    return sorted

def sort(arr, name ='1' ):
    print('\nThread' + name + 'started')
    if len(arr)< 2:#we want to stop when it reaches a lenght on 1
        print('\nThread' + name + 'finished: ')
        return print(arr)

    mid = len(arr)//2
    left = arr[:mid]
    right = arr[mid:]

    # Creating two threads for sorting left and right halves
    left_thread = threading.Thread(target=sort, args=(left, name+ '0'))#adds 0 to the thread name when it divides it to the left
    right_thread = threading.Thread(target=sort, args=(right, name + '1'))#adds 1 to the thread name when it divides it to the right

    # Start the threads
    left_thread.start()
    right_thread.start()

    # Wait for threads to complete
    left_thread.join()
    right_thread.join()


    print('\nThread' + name + 'finished: ')
    # Merge the results
    return print(merge(left, right))


if __name__ == "__main__":
    #test = []
    #fileOB = open('input.txt', "r")
   # lines = fileOB.read().splitlines()
   # for line in lines:
    #    test.extend(line.split())
    test = [3304, 8221, 26849, 14038, 1509, 6367, 7856, 21362]
    sorted_array = sort(test)
    print(sorted_array)


 
